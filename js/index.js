// Generated by CoffeeScript 2.6.1
var Status, calc, calc_game, calc_main, chart_default, draw_graph, draw_summary, format_money, init, init_charts, init_st, logs_default, lot, play_game, push, reflect_games, reflect_main_game, set_game, start, stop;

window.INTERVAL_SEC = 1;

window.draw_count = 1;

window.statuses = {};

window.logs = {};

window.games = {};

window.charts = {};

window.titles = ['所持金3n', '所持金3n+1', '所持金3n+2'];

window.main_game = {
  title: '本命ゲーム',
  p: {
    game_a: 0.5,
    game_b: 0.5
  }
};

window.DEFAULT_GAMES = {
  'game_a': {
    title: 'ゲームA',
    p: [[0, 0.48, 0.52], [0.52, 0, 0.48], [0.48, 0.52, 0]],
    to: [[0, 1, 2], [0, 1, 2], [0, 1, 2]],
    gain: [[0, 1, -1], [-1, 0, 1], [1, -1, 0]]
  },
  'game_b': {
    title: 'ゲームB',
    p: [[0, 0.01, 0.99], [0.15, 0, 0.85], [0.85, 0.15, 0]],
    to: [[0, 1, 2], [0, 1, 2], [0, 1, 2]],
    gain: [[0, 1, -1], [-1, 0, 1], [1, -1, 0]]
  }
};

window.timer = null;

$().ready(function() {
  init_charts();
  init();
  $('#start').on('click', function() {
    if (window.timer === null) {
      return start();
    } else {
      return stop();
    }
  });
  return $('#draw_count').on('change', function() {
    return window.draw_count = Number($(this).val());
  });
});

start = function() {
  stop();
  init();
  return window.timer = setTimeout(calc, window.INTERVAL_SEC);
};

stop = function() {
  if (window.timer !== null) {
    clearInterval(window.timer);
  }
  return window.timer = null;
};

calc = function(id) {
  calc_main();
  calc_game('game_a');
  calc_game('game_b');
  if (window.timer !== null) {
    return setTimeout(calc, window.INTERVAL_SEC);
  }
};

calc_main = function() {
  var p_total, result, seed, selected_game_name;
  seed = lot();
  p_total = 0;
  selected_game_name = void 0;
  Object.keys(window.main_game.p).map(function(game_name) {
    var p;
    p = window.main_game.p[game_name];
    p_total += p;
    if (seed < p_total && selected_game_name === void 0) {
      return selected_game_name = game_name;
    }
  });
  result = play_game(selected_game_name, window.statuses['game_main'].state);
  push('game_main', result);
  draw_graph('game_main', 'recent_game_main', window.logs.game_main.status_recent_logs);
  draw_graph('game_main', 'all_game_main', window.logs.game_main.status_all_logs);
  return draw_summary('game_main');
};

calc_game = function(id) {
  var result;
  result = play_game(id, window.statuses[id].state);
  push(id, result);
  draw_graph(id, 'recent_' + id, window.logs[id].status_recent_logs);
  draw_graph(id, 'all_' + id, window.logs[id].status_all_logs);
  return draw_summary(id);
};

push = function(id, result) {
  window.statuses[id].step += 1;
  window.statuses[id].money += result.gain;
  window.statuses[id].state = result.state;
  if (!(window.statuses[id].step % 100)) {
    window.logs[id].status_all_logs.push(window.statuses[id].clone());
  }
  window.logs[id].status_recent_logs.push(window.statuses[id].clone());
  if (window.logs[id].status_recent_logs.length > 1000) {
    return window.logs[id].status_recent_logs.shift();
  }
};

draw_summary = function(id) {
  if (window.statuses[id].step % window.draw_count) {
    return;
  }
  $('#step_' + id).html(window.statuses[id].step);
  $('#money_' + id).html(format_money(window.statuses[id].money));
  return $('#dps_' + id).html(format_money(window.statuses[id].money / window.statuses[id].step, 5));
};

draw_graph = function(id, graph_id, statuses) {
  if (statuses.length <= 0) {
    return;
  }
  if (window.statuses[id].step % window.draw_count) {
    return;
  }
  window.charts[graph_id].data.datasets[0].data = statuses.map(function(v) {
    return v.money;
  });
  window.charts[graph_id].data.labels = statuses.map(function(v) {
    return v.step;
  });
  return window.charts[graph_id].update();
};

play_game = function(id, state_before) {
  var gain, game, p_total, seed, selected_index, state;
  game = window.games[id];
  seed = lot();
  p_total = 0;
  selected_index = void 0;
  game.p[state_before].map(function(p, index) {
    p_total += p;
    if (seed < p_total && selected_index === void 0) {
      return selected_index = index;
    }
  });
  state = game.to[state_before][selected_index];
  gain = game.gain[state_before][selected_index];
  return {
    state: state,
    gain: gain
  };
};

init = function() {
  window.games = window.DEFAULT_GAMES;
  init_st();
  reflect_games();
  reflect_main_game();
  window.draw_count = Number($('#draw_count').val());
  return ['game_main'].concat(Object.keys(window.main_game.p)).map(function(game_name) {
    window.logs[game_name].status_all_logs.push(window.statuses[game_name].clone());
    return window.logs[game_name].status_recent_logs.push(window.statuses[game_name].clone());
  });
};

init_charts = function() {
  return ['game_main'].concat(Object.keys(window.main_game.p)).map(function(game_name) {
    window.charts['recent_' + game_name] = chart_default('recent_' + game_name);
    return window.charts['all_' + game_name] = chart_default('all_' + game_name);
  });
};

init_st = function() {
  window.step = 0;
  window.statuses = {};
  window.logs = {};
  return ['game_main'].concat(Object.keys(window.main_game.p)).map(function(game_name) {
    window.statuses[game_name] = new Status(0, 0, 0);
    return window.logs[game_name] = logs_default();
  });
};

reflect_main_game = function() {
  var tbody, thead;
  thead = $('#game_main thead');
  thead.html('').append($('<tr>').append($('<th>').html('ゲーム')).append($('<th>').html('確率')));
  tbody = $('#game_main tbody');
  tbody.html('');
  return Object.keys(window.main_game.p).map(function(game_name) {
    var p, tr;
    p = window.main_game.p[game_name];
    tr = $('<tr>');
    tr.append($('<td>').html(window.games[game_name].title)).append($('<td>').html('' + (p * 100) + '%'));
    return tbody.append(tr);
  });
};

reflect_games = function() {
  return Object.keys(window.games).map(function(k) {
    var tbody, thead, tr;
    thead = $('#' + k + ' thead');
    thead.html('');
    tr = $('<tr>').append($('<th>').html('状態＼遷移先'));
    window.titles.map(function(title) {
      return tr.append($('<th>').html(title));
    });
    thead.append(tr);
    tbody = $('#' + k + ' tbody');
    tbody.html('');
    return window.games[k].p.map(function(v, index) {
      tr = $('<tr>').append($('<th>').html(window.titles[index]));
      v.map(function(p, to_index) {
        var gain, text;
        gain = window.games[k].gain[index][to_index];
        text = (p * 100) + "%<br>" + format_money(gain);
        return tr.append($('<td>').html(p === 0 ? '-' : text));
      });
      return tbody.append(tr);
    });
  });
};

// p[a][b]: aでの発生する確率
// to[a][b]: p発生時の遷移先
// gain[a][b] p発生時の報酬
set_game = function(id, to_array, gain_array) {
  return window.games[id] = {
    p: to_array,
    to: to_array,
    gain: gain_array
  };
};

lot = function() {
  return Math.random();
};

logs_default = function() {
  return {
    status_all_logs: [],
    status_recent_logs: []
  };
};

chart_default = function(id) {
  return new Chart(document.getElementById(id).getContext('2d'), {
    type: 'line',
    data: {
      labels: [],
      datasets: [
        {
          data: [],
          steppedLine: false,
          datalabels: {
            display: false
          },
          showLine: true,
          borderColor: 'rgb(0, 0, 255)',
          pointRadius: 0,
          borderWidth: 1
        }
      ]
    },
    options: {
      animation: false,
      plugins: {
        legend: {
          display: false
        }
      }
    }
  });
};

format_money = function(money, fixed = 0) {
  var amount;
  amount = Math.abs(money);
  if (fixed > 0) {
    amount = amount.toFixed(fixed);
  }
  if (money < 0) {
    return '<span class="red">-' + amount + '$</span>';
  } else {
    return '<span class="blue">+' + amount + '$</span>';
  }
};

Status = class Status {
  constructor(step = 0, money1 = 0, state1 = 0) {
    this.step = step;
    this.money = money1;
    this.state = state1;
  }

  clone() {
    return new Status(this.step, this.money, this.state);
  }

};
